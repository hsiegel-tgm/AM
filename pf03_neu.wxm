/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 13.04.2 ] */

/* [wxMaxima: title   start ]
PF03
   [wxMaxima: title   end   ] */

/* [wxMaxima: input   start ] */
kill(all);
load(draw);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Glossar TODO
   [wxMaxima: section end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: comment start ]
INTEGRATION
    Die Integration ist das Gegenteil der Differentialrechnung

BESTIMMTES INTEGRAL
    Ein bestimmtes Integral ist ein Integral mit Grenzen.
    Es bestimmt die Flaeche unter einer Funktion zwischen zwei Grenzen. 
    Bei einem bestimmten Integral ist die Lösung ein einfacher Zahlenwert.



UNBESTIMMTES INTEGRAL
    Ein unbestimmtes Integral ist ein Integral ohne Grenzen.
    Es hat die Integrationskonstante c.
    Bei einem unbestimmten Integral erhält man als Lösung eine Funktion, eine sogenannte Stammfunktion.
   [wxMaxima: comment end   ] */

/* [wxMaxima: fold    end   ] */

/* [wxMaxima: section start ]
Bestimmtes und unbestimmtes Integral
   [wxMaxima: section end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: comment start ]
Unbestimmtes Integral
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
integrate(f(x),x) +c;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Bestimmtes Integral
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
'integrate(f(x),x,a,b);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Unbestimmtes Integral
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Ein unbestimmtes Integral wird durch die Integrationskonstante c zu einem.
Das anschreiben der Integrationskonstante c bewirkt, 
dass die Funktion eindeutig zuzuweisen ist, da ja die Konstanten Summen wegfallen.
/
| f(x) dx = F(x) + c
/
Die Stammfunktion als Ergebnis eines Unbestimmten Integrals hat unendlich vielen Lösungen, 
die sich nur um den Summanten unterscheiden.
   [wxMaxima: comment end   ] */

/* [wxMaxima: subsect start ]
Bestimmtes Integral
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Ein bestimmtes Integral ist die Flaeche unter einer Funktion. 
Da die Flaechen bekannt sind, faellt die Integrationskonstatante c weg.
Die Flaeche wird berechnet, in dem die Funktion integriert wird und die zwei Grenzen a und b eingesetzt werden.
Danach wird vom groessern Funktionswert F(b) der kleinere Funktionswert F(a) subtrahiert.
Daher entspicht ein bestimmtes Integral f(x) zwischen den Grenzen a und b der Flaeche 
    zwischen der Funktion, den Senkrechten bei x = a und x = b und der x-Achse.
  b                   
 /
 |
 | f(x) dx = F(b) - F(a)
 /                      
a
Als Angabe braucht man die Funktion und ihre Grenzen
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
f:6*x^3+2*x^2+x;
a:0.15;
b:0.4;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Grafik
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
wxdraw2d(
         fill_color  = gray90,
         filled_func = true,
         yrange = [0,1.5],
         xrange = [0,0.8],
         color = violet,
         key = "Flaeche",
         explicit(f,x,a,b),
         key = "f",
         filled_func = false,
         line_width=3,
         explicit(f,x,0,1),
         color = cyan,
         line_width=2,
         point_type = 7,
         point_size = 1,
         key = "a",
         points_joined = true,
         color = dark-magenta,
         point_size = 0,           
         points([a,a],[0,subst(a,x,f)]),
         key = "b",
         color = dark-violet,  
         points([b,b],[0,subst(b,x,f)])
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: fold    end   ] */

/* [wxMaxima: section start ]
Integration
   [wxMaxima: section end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: subsect start ]
Grundintegrale
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
regel:[0=0,c=c*n,1/x = ln(x),x^n = (x^n+1) / (n+1),x = x^2/2,x^2 = x^3/3, 1/sqrt(x) = 2* sqrt(x),%e^x = %e^x,%e^(k*x) = (%e^(k*x)/k),a^x = a^x / ln(a), sin(x) = -cos(x),cos(x) = sin(x), tan(x) = log(sec(x)),'integrate(f(x)+g(x),x) = 'integrate(f(x),x)  + 'integrate(g(x),x),'integrate(f(x)+'diff(g(x),x),x) = f(x)*g(x) - 'integrate(g(x)+'diff(f(x),x),x)]$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
for i:1 while i<=length(regel) do [
    print(regel[i])
]$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Integration in Maxima
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Die integration in Maxima erfolgt mittels dem integrate Befehl:

Function: integrate (expr, x) => Unbestimmtes Integral 
Function: integrate (expr, x, a, b) => Bestimmtes Integral
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
integrate(sin(x),x);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
integrate(sin(x),x,0,%pi);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: fold    end   ] */

/* [wxMaxima: section start ]
Obersumme, Untersumme und die Verfahren von Kepler und Simpson
   [wxMaxima: section end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: input   start ] */
kill (allbut (draw));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Obersumme
   [wxMaxima: subsect end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: comment start ]
Die Obersumme ist ein numerisches Naeherungsverfahren zur Berechnung der Fläche einer Funktion zwischen zwei Grenzen.

Das Verfahren unterteilt die Flaeche unter der Funktion in Teilflaechen (Rechtecke).
Bei der Obersumme werden die Flaechen im gegenteil zur Untersumme ober der Funktion abgebildet.

Das Ergenniss ist daher immer etwas groesser als die eigentliche Flaeche. Daher spricht man von einem Naeherungsverfahren.
Trotzdem naehert die Flaeche immer mehr der des bestimmten Integrals, je mehr Unterteilungen getroffen werden.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
f:log(x)$
a:2$
b:5$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Obersumme wo n = 3
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
wxdraw2d(yrange = [0,2],
         xrange = [0.5,6],
         fill_color  = gray90,
         filled_func = true,
         explicit(f,x,a,b),
         fill_color  = pink,
         explicit(subst(3,x,f),x,2,3),
         fill_color  = plum,
         explicit(subst(4,x,f),x,3,4),
         fill_color  = pink,
         explicit(subst(5,x,f),x,4,5),
         color = dark-magenta,
         filled_func = false,
         line_width=3,
         explicit(f,x,0,20),
         points_joined=true,
         line_width=2,
         point_size=0,
         color=black,
         points([2,2],[-0.5,2]),
         points([5,5],[-0.5,2])
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Obersumme wo n = 6
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
wxdraw2d(yrange = [0,2],
         xrange = [0.5,6],
         fill_color  = gray90,
         filled_func = true,
         explicit(f,x,a,b),
         filled_func = true,
         fill_color  = pink,
         explicit(subst(2.5,x,f),x,2,2.5),
         fill_color  = plum,
         explicit(subst(3,x,f),x,2.5,3),
         fill_color  = pink,
         explicit(subst(3.5,x,f),x,3,3.5),
         fill_color  = plum,
         explicit(subst(4,x,f),x,3.5,4),
         fill_color  = pink,
         explicit(subst(4.5,x,f),x,4,4.5),
         fill_color  = plum,
         explicit(subst(5,x,f),x,4.5,5),
         color = dark-magenta,
         filled_func = false,
         line_width=3,
         explicit(f,x,0,20),
         points_joined=true,
         line_width=2,
         point_size=0,
         color=black,
         points([2,2],[-0.5,2]),
         points([5,5],[-0.5,2])
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Block fuer die obersumme
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
obersumme(f,a,b,n):= block(
    weite:(b-a)/n,
    sum:0,
    for i:1 while i<= n do [
        point: a + weite*i,
        hoehe: subst(point,x,f),
        sum: sum + (weite * hoehe)
    ],
    return(float(sum))  
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Normales Integrieren (Richtiges Ergebniss)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
integrate(f,x,a,b),numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Anwenden des Blockes
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
obersumme(f,a,b,6);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
obersumme(f,a,b,25);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
obersumme(f,a,b,1000);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Desto groesser n, desto naeher ist die obersumme am richtigem Ergebniss, jedoch immer groesser als das eigentliche.
   [wxMaxima: comment end   ] */

/* [wxMaxima: fold    end   ] */

/* [wxMaxima: subsect start ]
Untersumme
   [wxMaxima: subsect end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: comment start ]
Die Untersumme ist ein numerisches Naeherungsverfahren zur Berechnung der Fläche einer Funktion zwischen zwei Grenzen.
Das Verfahren unterteilt die Flaeche unter der Funktion in Teilflaechen (Rechtecke).

Bei der Untersumme werden die Flaechen im gegenteil zur Obersumme unter der Funktion abgebildet.

Das Ergebniss ist daher immer etwas kleiner als die eigentliche Flaeche. Daher spricht man von einem Naeherungsverfahren.
Trotzdem naehert die Flaeche immer mehr der des bestimmten Integrals, je mehr Unterteilungen getroffen werden.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
f:log(x)$
a:2$
b:5$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Untersumme wo n = 3
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
wxdraw2d(yrange = [0,2],
         xrange = [0.5,6],
         fill_color  = gray90,
         filled_func = true,
         explicit(f,x,a,b),
         fill_color  = pink,
         explicit(subst(2,x,f),x,2,3),
         fill_color  = plum,
         explicit(subst(3,x,f),x,3,4),
         fill_color  = pink,
         explicit(subst(4,x,f),x,4,5),
         color = dark-magenta,
         filled_func = false,
         line_width=3,
         explicit(f,x,0,20),
         points_joined=true,
         line_width=2,
         point_size=0,
         color=black,
         points([2,2],[-0.5,2]),
         points([5,5],[-0.5,2])
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Untersumme wo n = 6
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
wxdraw2d(yrange = [0,2],
         xrange = [0.5,6],
         fill_color  = gray90,
         filled_func = true,
         explicit(f,x,a,b),
         filled_func = true,
         fill_color  = pink,
         explicit(subst(2,x,f),x,2,2.5),
         fill_color  = plum,
         explicit(subst(2.5,x,f),x,2.5,3),
         fill_color  = pink,
         explicit(subst(3,x,f),x,3,3.5),
         fill_color  = plum,
         explicit(subst(3.5,x,f),x,3.5,4),
         fill_color  = pink,
         explicit(subst(4,x,f),x,4,4.5),
         fill_color  = plum,
         explicit(subst(4.5,x,f),x,4.5,5),
         color = dark-magenta,
         filled_func = false,
         line_width=3,
         explicit(f,x,0,20),
         points_joined=true,
         line_width=2,
         point_size=0,
         color=black,
         points([2,2],[-0.5,2]),
         points([5,5],[-0.5,2])
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Block fuer die obersumme
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
untersumme(f,a,b,n):= block(
    weite:(b-a)/n,
    sum:0,
    for i:1 while i<= n do [
        point: a + (weite*(i-1)),
        hoehe: subst(point,x,f),
        sum: sum + (weite * hoehe)
    ],
    return(float(sum))  
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Normales Integrieren (Richtiges Ergebniss)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
integrate(f,x,a,b),numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Anwenden des Blockes
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
untersumme(f,a,b,5);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
untersumme(f,a,b,25);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
untersumme(f,a,b,1000);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Desto groesser n, desto naeher ist die untersumme am richtigem Ergebniss, jedoch immer kleiner als das eigentliche.
   [wxMaxima: comment end   ] */

/* [wxMaxima: fold    end   ] */

/* [wxMaxima: subsect start ]
Kepler'sche Fassregel
   [wxMaxima: subsect end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: comment start ]
Die Keplersche Fassregel ist ein Verfahren zur numerischen Berechnung eines Integrales.
Sie funktioniert, indem man eine Parabel ueber die Funktion gelegt wird und den Flaecheninhalt berechnet.


(1) 2 Punkte auf der Funktion muessen gewaehlt werden
(2) Errechnen des Mittelpunktes dieser zwei Punkte
(3) Eine Parabel durch diese 3 Punkte legen
(4) Unter der Parabel wird ueber das Integral die Flaeche ausgerechnet
(5) Dadurch erhaelt man einen Naeherungswert 

Die Formel ((b-a)/6 * (f(a)+4*f((a+b)/2)+f(b))) wird hierfuer benoetigt.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
kepler(a,b):=block(
    return ((b-a)/6 * (f(a)+4*f((a+b)/2)+f(b)))
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
f(x):=log(x)$
a:2$
b:5$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Grafik
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
wxdraw2d(yrange = [0,2],
         xrange = [0.5,6],
         fill_color  = gray90,
         filled_func = true,
         explicit(f,x,a,b),
         color = dark-magenta,
         filled_func = false,
         line_width=3,
         explicit(f,x,0,20),
         points_joined=true,
         line_width=2,
         point_size=0,
         color=black,
         points([2,2],[-0.5,2]),
         points([5,5],[-0.5,2])
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Berechnung durch verwendung des Kepler blockes
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
kepler(2,5),numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: fold    end   ] */

/* [wxMaxima: subsect start ]
Simpson 
   [wxMaxima: subsect end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: comment start ]
Das Simpson Verfahren unterteilt die Flaeche in kleine Teilstuecke und berechnet diese mittels der Keplerschen Fassregel.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
simpson(a,b,n):=block(
    [p:(b-a)/n,
     erg:f(a)+f(b),
     erg1:0],
    for i:1 step 2 while ( i < n ) do
        [erg1:erg1+ f(a+i*p)],
    [erg: erg+4*erg1,erg1:0],
    for i:2 step 2 while ( i < (n-1) ) do
        [erg1:erg1 + f(a+i*p)],
    [erg: (erg+2*erg1)*(b-a)/(3*n)],
    return(float(erg))
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Angabe
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
f(x):= log(x);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Aufrufen der Funktion
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
simpson(2,5,1000);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: fold    end   ] */

/* [wxMaxima: fold    end   ] */

/* [wxMaxima: section start ]
Integrationsverfahren
   [wxMaxima: section end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: input   start ] */
kill (allbut (draw));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Integration durch Substitution
   [wxMaxima: subsect end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: comment start ]
Die Integration durch Substitution ist das Gegenstück der Kettenregel in der Differentialrechnung.

Es wird daher jeweils ein Term einfach ersetzt.

    (1) Integrationsvariable festlegen.
    (2) Ableiten der Integrationsvariable.
    (3) dx bilden     dx = du / u'
    (4) u und dx in Funktion einsetzen.
    (5) Integrieren
    (6) für u den ursprünglichen Wert einsetzen
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
f(x):='integrate(5*sqrt(4+5*x),x);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
(1) Integrationsvariable u wird festgelegt
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ug:4+5*x;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
f(x):='integrate(5*sqrt(u),x);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
(2) Ableiten der Integrationsvariable u 
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
u1:diff(ug,x,1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
(3) dx wird durch du ersetzt
du / dx = u' 
dx = du / u'
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
dx: u/u1;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
(4) u und dx in die Funktion einsetzten
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
'integrate(5*sqrt(u),dx);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Wegstreichen der 5
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
'integrate(sqrt(u),dx*5);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
(5) Integrieren
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
erg:integrate(sqrt(u),5*dx)+c;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
6) für u den ursprünglichen Wert einsetzen
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
subst(ug,u,erg);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: fold    end   ] */

/* [wxMaxima: subsect start ]
Integration durch partielle Integration
   [wxMaxima: subsect end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: comment start ]
Die partielle Integration ist die Umkehrung der Produktregel der Differentialrechnung.
Um die partielle Integration Verwenden zu koennen, muss das Integral aus einem Produkt bestehen (u*v).
Jeweils ein Faktor wird u und ein Faktor wird v zugewiesen. 
Der Faktor welcher u zugewiesen wird sollte der einfachere sein:
Die Variable u muss abgeleitet werden.
Die Variable v muss integriert werden.

/                   /
|(u * v') = u * v - |(u' * v)  
/                   /

(1) Die Faktoren den Variablen u und v zuweisen
(2) u wird abgeleitet
(3) v wird integriert
(4) Einsetzen der neuen Werte in die Formel + anfuegen der Integrationskonstante c
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
definieren des Integrals
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
'integrate(x*%e^x,x);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
(1) Die Faktoren den Variablen u und v zuweisen
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
u:x$
vd:%e^x$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
(2) u wird abgeleitet
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
ud: diff(u,x);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
(3) v wird integriert
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
v: integrate(vd,x);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
(4) Einsetzen der neuen Werte in die Formel + anfuegen der Integrationskonstante c
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
u * v - integrate(ud*v,x)+c;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Ueberprufung des Ergebnisses
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
integrate(x*%e^x,x);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: fold    end   ] */

/* [wxMaxima: subsect start ]
Integration durch Partialbruchzerlegung
   [wxMaxima: subsect end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: comment start ]
Die Partialbruchzerlegung (Teilbruch) ist eine Methode zur Vereinfachung des Integranten.
Diese Methode findet eine Anwendung, wenn ein Term nicht als ganzes integriert werden kann.
Sie wird verwendet, wenn Z(x) und N(x) beides Polynome sind.


1) Polynomdivision durchführen
2) Nennerpolynom faktorisieren
3) Auf den Faktoren des Nenners Unbekannte (A,B,C, ...) einsetzen
4) Auf gemeinsamen Nenner bringen
5) Ausmultiplizieren
6) Nach Potenzen sortieren
7) Koeffizientenvergleich 
8) Gleichungssystem lösen
9) Lösungen einsetzen
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Es gibt zwei Faelle:
    1. Fall   Grad Z(x) < Grad N(x)
    2. Fall 
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
f(x):= 1/((x-2)*(x-3)*(x-4));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
f:1/((x-2)*(x-3)*(x-4));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
(2) Zerlegen des Nenners in Faktoren.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
A/(x-2)+B/(x-3)+C/(x-4);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
(3) Auf gemeinsamen Nenner bringen
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
nenner:ratexpand(((C/(x-4))*(x-4) * (x-3) * (x-2) + (B/(x-3))*(x-4) * (x-3) * (x-2) + (A/(x-2))*(x-4) * (x-3) * (x-2)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
4) Berechnen der Zählervariablen
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
coeff(Funktion, variable, exponent)
Funktion    bebötigte Funktion
variable    gibt an welche variable für den Koeffizientenvergleich herangezogen wird
exponent    zu vergleichender Grad
Grad =0 x^0
Grad =1 x^1
Grad =2 x^2
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
I: coeff(nenner,x,0);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
II: coeff(nenner,x,1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
III: coeff(nenner,x,2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
solve([I,II,III],[A,B,C]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
(5) Einsetzen der Werte in die Gleichung
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
nenner;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
subst(0,C,subst(0,B,subst(0,A,nenner)));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
erg: (1/2)/(x-2)+(-1)/(x-3)+(1/2)/(x-4);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
6) Integrieren von erg
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
integrate(erg,x);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: fold    end   ] */

/* [wxMaxima: subsect start ]
Integration durch Partialbruchzerlegung    1. Fall b)       Grad Z(x) < Grad N(x)
   [wxMaxima: subsect end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: comment start ]
Nicht alle Faktoren sind verschieden
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Vorgehensweise:
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
1) definieren der Funktion
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
f(x):= 1/((x-2)^2*(x-3));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
2) Zerlegen des Nenners in Faktoren
    Muss mit der Hand durchgeführt werden, weil es in Maxima keine Funktion dafür gibt.
    1. Faktor: x-2
    2. Faktor: (x-2)^2
    3. Faktor: x-3
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
A/(x-2)+B/(x-2)^2+C/(x-3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
3)Auf gemeinsamen Nenner bringen
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
a: 1=ratexpand(A*(x-2)*(x-3)+B*(x-3)+C*(x-2)^2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
4)Berechnen der Zählervariablen
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
b: coeff(a,x,0);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
c: coeff(a,x,1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
d: coeff(a,x,2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
solve([b,c,d],[A,B,C]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
5)5)Einsetzen der Werte in die Gleichung
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
erg: -1/(x-2)+-1/(x-2)^2+1/(x-3);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
6)integrieren von erg
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
integrate(erg,x);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: fold    end   ] */

/* [wxMaxima: subsect start ]
Integration durch Partialbruchzerlegung    2. Fall         Z(x) > N(x) 
   [wxMaxima: subsect end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: comment start ]
Ist der Grad des Zählers größer als der des Nenners muss vor der Partialbruchzerlegung eine
Polynomdivision durchgeführt werden.
Das Ergebnis muss nicht weiter behandelt werden.
Der Rest der Polynomdivision wird wie in den vorherigen Unterkapiteln berechnet.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
definieren der Funktion
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
f(x):= (3*x^3+8*x+2)/(x^2+2*x);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
durchführen der Polynomdivision
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
divide(3*x^3+8*x+2,x^2+2*x);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Der Rest wird wie im 1. Fall berechnet
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
(20*x+2)/(x^2+2*x);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Weitere Rechenschritte sind nciht nötig, da diese in den vorhergegangenen Unterkapiteln schon
behandelt wurden.
   [wxMaxima: comment end   ] */

/* [wxMaxima: fold    end   ] */

/* [wxMaxima: subsect start ]
Integration durch Partialbruchzerlegung bla Marlene
   [wxMaxima: subsect end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: comment start ]
Vorgehen:
1) Polynomdivision durchführen
2) Nennerpolynom faktorisieren
3) Auf den Faktoren des Nenners Unbekannte (A,B,C, ...) einsetzen
4) Auf gemeinsamen Nenner bringen
5) Ausmultiplizieren
6) Nach Potenzen sortieren
7) Koeffizientenvergleich 
8) Gleichungssystem lösen
9) Lösungen einsetzen
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Beispiel:
x^4-x^3-x-1 / x^3-x^2
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
f: (x^4-x^3-x-1) / (x^3-x^2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
(1) Polynomdivision
Die Polynomdivision kann man nur durchfuehren, wenn entweder Zähler- und 
Nennerpolynom die gleiche Potenz haben, oder wenn Zählerpolynom größer
ist als das Nennerpolynom.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
divide(x^4-x^3-x-1,x^3-x^2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Das ergibt den Quotienten x und den neuen Bruch:
-x-1/x^3-x^2
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Damit das ganze einfacher wird, heben wir -1 raus (Bruch ist jetzt 
positiv) und setzen das später wieder ein.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
(2) Nennerpolynom faktorisieren:
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
factor(x^3-x^2);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Der 1. Nenner ist x, der 2. x^2 und der 2. x-1
Wenn eine größere Potenz als 1 beim faktorisieren rauskommt, muss man
immer jede Potenz als Nenner verwenden
Beispiel: 
(x-1)^3
1. Nenner (x-1)^3
2. Nenner (x-1)^2
3. Nenner (x-1)
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
3) Auf den Faktoren des Nenners Unbekannte (A,B,C...) einsetzen
Die einzelnen Brüche werden immer miteinander addiert.
-x-1/x^3-x^2 = A/x + B/x^2 + C/x-1
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
4) Auf gemeinsamen Nenner bringen:
-x-1/x^3-x^2 = A/x + B/x^2 + C/x-1
-x-1 = A*(x^2-x) + B*(x-1) + C*(x^2)
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
5) Ausmultiplizieren:
-x-1 = A*x^2 - A*x + B*x - B + C*x^2
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
6) Nach Potenzen sortieren:
-x-1 = x^2*(A+c) + x*(-A+B) - B
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
7) Koeffizientenvergleich:
A+C = 0
-A+B = 1
-B = 1
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
8) Gleichungssystem lösen:
A = -2
B = -1
C = 2
Jetzt geben wir den bei Punkt 2 rausgegebenen Faktor -1 wieder dazu
A = 2
B = 1
C = -2
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
9) Lösungen einsetzen:
-x-1/x^3-x^2 = 2/x^2 + 1/x - 2/x-1
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Das Ergebniskann man jetzt einfacher Integrieren als den Bruch am 
Anfang.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Integral x^4-x^3-x-1/x^3-x^2 dx =  Integral (x + 2/x^2 + 1/x -2/x-1) dx
x^2/2 + 2*-x^-1 + ln|x| - 2*ln|x-1|
   [wxMaxima: comment end   ] */

/* [wxMaxima: fold    end   ] */

/* [wxMaxima: subsect start ]
Integration durch Uneigentliche Integrale TODO
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
kill (allbut (draw));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Wenn mindestens 1 Integrationsgrenze unendlich ist.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
integrate(f(x),x,a,inf);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
integrate(1/x^3,x,1,inf);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Wenn bei mindestens 1 der beiden Integrationsgrenzen unendlich ist.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Rechnet man genauso wie 1. Art, nur dass man z gegen 0 laufen lässt.
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Beispiel: 
Integral von 0 bis 1 von 1/x^2 dx
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
lim(z->0)*Integral von 0 bis 1 1/x^2 dx
=
lim(z->0)* - 1/x in den Grenzen 0 bis 1
=
1/z - 1
=
Unendlich
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
integrate(1/x^2,x,0,1);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: fold    end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
