/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 13.04.2 ] */

/* [wxMaxima: title   start ]
PF03
   [wxMaxima: title   end   ] */

/* [wxMaxima: input   start ] */
kill(all);
load(draw);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: section start ]
Glossar
   [wxMaxima: section end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: comment start ]
INTEGRATION
    Die Integration ist das Gegenteil der Differentialrechnung

BESTIMMTES INTEGRAL
    Ein bestimmtes Integral ist ein Integral mit Grenzen.
    Es bestimmt die Flaeche unter einer Funktion zwischen zwei Grenzen. 
    Bei einem bestimmten Integral ist die Lösung ein einfacher Zahlenwert.

UNBESTIMMTES INTEGRAL
    Ein unbestimmtes Integral ist ein Integral ohne Grenzen.
    Es hat die Integrationskonstante c.
    Bei einem unbestimmten Integral erhält man als Lösung eine Funktion, eine sogenannte Stammfunktion.
   [wxMaxima: comment end   ] */

/* [wxMaxima: fold    end   ] */

/* [wxMaxima: section start ]
Bestimmtes und unbestimmtes Integral
   [wxMaxima: section end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: comment start ]
Unbestimmtes Integral
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
integrate(f(x),x) +c;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Bestimmtes Integral
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
'integrate(f(x),x,a,b);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Unbestimmtes Integral
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Ein unbestimmtes Integral wird durch die Integrationskonstante c zu einem.
Das anschreiben der Integrationskonstante c bewirkt, 
dass die Funktion eindeutig zuzuweisen ist, da ja die Konstanten Summen wegfallen.
/
| f(x) dx = F(x) + c
/
Die Stammfunktion als Ergebnis eines Unbestimmten Integrals hat unendlich vielen Lösungen, 
die sich nur um den Summanten unterscheiden.
   [wxMaxima: comment end   ] */

/* [wxMaxima: subsect start ]
Bestimmtes Integral
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Ein bestimmtes Integral ist die Flaeche unter einer Funktion. 
Da die Flaechen bekannt sind, faellt die Integrationskonstatante c weg.
Die Flaeche wird berechnet, in dem die Funktion integriert wird und die zwei Grenzen a und b eingesetzt werden.
Danach wird vom groessern Funktionswert F(b) der kleinere Funktionswert F(a) subtrahiert.
Daher entspicht ein bestimmtes Integral f(x) zwischen den Grenzen a und b der Flaeche 
    zwischen der Funktion, den Senkrechten bei x = a und x = b und der x-Achse.
  b                   
 /
 |
 | f(x) dx = F(b) - F(a)
 /                      
a
Als Angabe braucht man die Funktion und ihre Grenzen
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
f:6*x^3+2*x^2+x;
a:0.15;
b:0.4;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Grafik
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
wxdraw2d(
         fill_color  = gray90,
         filled_func = true,
         yrange = [0,1.5],
         xrange = [0,0.8],
         color = violet,
         key = "Flaeche",
         explicit(f,x,a,b),
         key = "f",
         filled_func = false,
         line_width=3,
         explicit(f,x,0,1),
         color = cyan,
         line_width=2,
         point_type = 7,
         point_size = 1,
         key = "a",
         points_joined = true,
         color = dark-magenta,
         point_size = 0,           
         points([a,a],[0,subst(a,x,f)]),
         key = "b",
         color = dark-violet,  
         points([b,b],[0,subst(b,x,f)])
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: fold    end   ] */

/* [wxMaxima: section start ]
Integration
   [wxMaxima: section end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: subsect start ]
Grundintegrale
   [wxMaxima: subsect end   ] */

/* [wxMaxima: input   start ] */
regel:[0=0,c=c*n,1/x = ln(x),x^n = (x^n+1) / (n+1),x = x^2/2,x^2 = x^3/3, 1/sqrt(x) = 2* sqrt(x),%e^x = %e^x,%e^(k*x) = (%e^(k*x)/k),a^x = a^x / ln(a), sin(x) = -cos(x),cos(x) = sin(x), tan(x) = log(sec(x)),'integrate(f(x)+g(x),x) = 'integrate(f(x),x)  + 'integrate(g(x),x),'integrate(f(x)+'diff(g(x),x),x) = f(x)*g(x) - 'integrate(g(x)+'diff(f(x),x),x)]$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
for i:1 while i<=length(regel) do [
    print(regel[i])
]$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Integration in Maxima
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Die integration in Maxima erfolgt mittels dem integrate Befehl:

Function: integrate (expr, x) => Unbestimmtes Integral 
Function: integrate (expr, x, a, b) => Bestimmtes Integral
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
integrate(sin(x),x);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
integrate(sin(x),x,0,%pi);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: fold    end   ] */

/* [wxMaxima: section start ]
Obersumme, Untersumme und die Verfahren von Kepler und Simpson
   [wxMaxima: section end   ] */

/* [wxMaxima: input   start ] */
kill (allbut (rand_col,draw));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: subsect start ]
Obersumme
   [wxMaxima: subsect end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: comment start ]
Die Obersumme ist ein numerisches Naeherungsverfahren zur Berechnung der Fläche einer Funktion zwischen zwei Grenzen.

Das Verfahren unterteilt die Flaeche unter der Funktion in Teilflaechen (Rechtecke).
Bei der Obersumme werden die Flaechen im gegenteil zur Untersumme ober der Funktion abgebildet.

Das Ergenniss ist daher immer etwas groesser als die eigentliche Flaeche. Daher spricht man von einem Naeherungsverfahren.
Trotzdem naehert die Flaeche immer mehr der des bestimmten Integrals, je mehr Unterteilungen getroffen werden.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
f:log(x)$
a:2$
b:5$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Obersumme wo n = 3
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
wxdraw2d(yrange = [0,2],
         xrange = [0.5,6],
         fill_color  = gray90,
         filled_func = true,
         explicit(f,x,a,b),
         fill_color  = pink,
         explicit(subst(3,x,f),x,2,3),
         fill_color  = plum,
         explicit(subst(4,x,f),x,3,4),
         fill_color  = pink,
         explicit(subst(5,x,f),x,4,5),
         color = dark-magenta,
         filled_func = false,
         line_width=3,
         explicit(f,x,0,20),
         points_joined=true,
         line_width=2,
         point_size=0,
         color=black,
         points([2,2],[-0.5,2]),
         points([5,5],[-0.5,2])
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Obersumme wo n = 6
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
wxdraw2d(yrange = [0,2],
         xrange = [0.5,6],
         fill_color  = gray90,
         filled_func = true,
         explicit(f,x,a,b),
         filled_func = true,
         fill_color  = pink,
         explicit(subst(2.5,x,f),x,2,2.5),
         fill_color  = plum,
         explicit(subst(3,x,f),x,2.5,3),
         fill_color  = pink,
         explicit(subst(3.5,x,f),x,3,3.5),
         fill_color  = plum,
         explicit(subst(4,x,f),x,3.5,4),
         fill_color  = pink,
         explicit(subst(4.5,x,f),x,4,4.5),
         fill_color  = plum,
         explicit(subst(5,x,f),x,4.5,5),
         color = dark-magenta,
         filled_func = false,
         line_width=3,
         explicit(f,x,0,20),
         points_joined=true,
         line_width=2,
         point_size=0,
         color=black,
         points([2,2],[-0.5,2]),
         points([5,5],[-0.5,2])
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Block fuer die obersumme
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
obersumme(f,a,b,n):= block(
    weite:(b-a)/n,
    sum:0,
    for i:1 while i<= n do [
        point: a + weite*i,
        hoehe: subst(point,x,f),
        sum: sum + (weite * hoehe)
    ],
    return(float(sum))  
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Normales Integrieren (Richtiges Ergebniss)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
integrate(f,x,a,b),numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Anwenden des Blockes
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
obersumme(f,a,b,6);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
obersumme(f,a,b,25);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
obersumme(f,a,b,1000);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Desto groesser n, desto naeher ist die obersumme am richtigem Ergebniss, jedoch immer groesser als das eigentliche.
   [wxMaxima: comment end   ] */

/* [wxMaxima: fold    end   ] */

/* [wxMaxima: subsect start ]
Untersumme
   [wxMaxima: subsect end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: comment start ]
Die Untersumme ist ein numerisches Naeherungsverfahren zur Berechnung der Fläche einer Funktion zwischen zwei Grenzen.
Das Verfahren unterteilt die Flaeche unter der Funktion in Teilflaechen (Rechtecke).

Bei der Untersumme werden die Flaechen im gegenteil zur Obersumme unter der Funktion abgebildet.

Das Ergebniss ist daher immer etwas kleiner als die eigentliche Flaeche. Daher spricht man von einem Naeherungsverfahren.
Trotzdem naehert die Flaeche immer mehr der des bestimmten Integrals, je mehr Unterteilungen getroffen werden.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
f:log(x)$
a:2$
b:5$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Untersumme wo n = 3
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
wxdraw2d(yrange = [0,2],
         xrange = [0.5,6],
         fill_color  = gray90,
         filled_func = true,
         explicit(f,x,a,b),
         fill_color  = pink,
         explicit(subst(2,x,f),x,2,3),
         fill_color  = plum,
         explicit(subst(3,x,f),x,3,4),
         fill_color  = pink,
         explicit(subst(4,x,f),x,4,5),
         color = dark-magenta,
         filled_func = false,
         line_width=3,
         explicit(f,x,0,20),
         points_joined=true,
         line_width=2,
         point_size=0,
         color=black,
         points([2,2],[-0.5,2]),
         points([5,5],[-0.5,2])
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Untersumme wo n = 6
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
wxdraw2d(yrange = [0,2],
         xrange = [0.5,6],
         fill_color  = gray90,
         filled_func = true,
         explicit(f,x,a,b),
         filled_func = true,
         fill_color  = pink,
         explicit(subst(2,x,f),x,2,2.5),
         fill_color  = plum,
         explicit(subst(2.5,x,f),x,2.5,3),
         fill_color  = pink,
         explicit(subst(3,x,f),x,3,3.5),
         fill_color  = plum,
         explicit(subst(3.5,x,f),x,3.5,4),
         fill_color  = pink,
         explicit(subst(4,x,f),x,4,4.5),
         fill_color  = plum,
         explicit(subst(4.5,x,f),x,4.5,5),
         color = dark-magenta,
         filled_func = false,
         line_width=3,
         explicit(f,x,0,20),
         points_joined=true,
         line_width=2,
         point_size=0,
         color=black,
         points([2,2],[-0.5,2]),
         points([5,5],[-0.5,2])
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Block fuer die obersumme
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
untersumme(f,a,b,n):= block(
    weite:(b-a)/n,
    sum:0,
    for i:1 while i<= n do [
        point: a + (weite*(i-1)),
        hoehe: subst(point,x,f),
        sum: sum + (weite * hoehe)
    ],
    return(float(sum))  
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Normales Integrieren (Richtiges Ergebniss)
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
integrate(f,x,a,b),numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Anwenden des Blockes
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
untersumme(f,a,b,5);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
untersumme(f,a,b,25);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
untersumme(f,a,b,1000);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Desto groesser n, desto naeher ist die untersumme am richtigem Ergebniss, jedoch immer kleiner als das eigentliche.
   [wxMaxima: comment end   ] */

/* [wxMaxima: fold    end   ] */

/* [wxMaxima: subsect start ]
Kepler'sche Fassregel
   [wxMaxima: subsect end   ] */

/* [wxMaxima: comment start ]
Die Keplersche Fassregel ist ein Verfahren zur numerischen Berechnung eines Integrales.
Sie funktioniert, indem man eine Parabel ueber die Funktion gelegt wird und den Flaecheninhalt berechnet.


(1) 2 Punkte auf der Funktion muessen gewaehlt werden
(2) Errechnen des Mittelpunktes dieser zwei Punkte


Man nimmt 2 Punkte auf der Funktion an und errechnet sich deren Mittepunkt.
Nun hat man 3 Punkte.
Durch diese 3 Punkte legt man eine Parabel.
Unter der Parabel wird über das Integral die Fläche ausgerechnet.
So erhält man wie gesagt einen ungenauen Näherrungswert des Integrals


   [wxMaxima: comment end   ] */

/* [wxMaxima: subsect start ]
Herleitung
   [wxMaxima: subsect end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: comment start ]
Die Keplersche Fassregel ist ein Verfahren der numerischen Integration, bei dem eine Näherung zum Integral
der Funktion f(x) im Intervall [a,b] berechnet wird, indem man sie durch eine Parabel annähert.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Für das Keplerverfahren wird eine quadratsche Funktion (Parabel) benötigt, um sich der Funktion
annähern zu können.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
y : u*x^2+ v*x + w;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Für das Keplerverfahren sind 3 Punkte notwendig, die beiden Grenzen einer Funktion (a und b),
sowie der Mittelpunkt dieser (h).
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
h: (a+b)/2;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Alle Funktionsgleichungen für das zu lösende Gleichungssystem werden erstellt.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
I: f(a) = u*a^2+v*a+w;
II: f(h) = u*h^2+v*h+w;
III: f(b) = u*b^2+v*b+w;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Durch die Lösung des Gleichungssystems erhält man die gesuchten Variablen u,v,w (als Liste);
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
lsg: solve([I,II,III],[u,v,w]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Nun wird die vorher erhaltenene Lösung integiert. Die Parameter der Funktion sind die Funktion
dx (x), sowie die untere (a) und obere Grenze (b). In das erhaltene Integral setze ich dannn die 
Lösung ein.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
integrate(y,x,a,b),lsg;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Das Ergebnis wird nun mithilfe von ratsim vereinfacht. % greift auf den letzten Ausdruck zu.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
%, ratsimp;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Das Ergebnis wird faktorisiert.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
kepler: factor(%);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Der Kepler wird für die zukünfitge Verwendung als Block bespeichert.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
kepler(a,b) := block(
    return(''kepler)
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: fold    end   ] */

/* [wxMaxima: subsect start ]
Modul
   [wxMaxima: subsect end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
kepler(a,b):=block(
    return((b-a)/6*(f(a)+4*f((a+b)/2)+f(b)))
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: fold    end   ] */

/* [wxMaxima: subsect start ]
Grafische Erklärung
   [wxMaxima: subsect end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: comment start ]
Für die grafische Erklärung benötige ich eine beliebige Funktion und eine Parabel:
f(x) = Funktion, welcher ich mich annähern möchte
p(x) = Grundfunktion einer Parabel
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
f(x):=3*x^3+5*x^2+x;
p(x):=u*x^2+v*x+w;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Wir untersuchen die Funktion in den Grenzen -1 und 0
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
a:-1;
b:0;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Nun werden f(x) und p(x) gleichgesetzt. Einmal mit beiden Grenzen (a+b) und einmal
mit dem Mittelpunkt dieser Grenzen (a+b).
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
I:f(a)=u*a^2+v*a+w;
II:f(b)=u*b^2+v*b+w;
III:f((a+b)/2)=u*((a+b)/2)^2+v*((a+b)/2)+w;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Das Gleichungssystem wird mit den gerade erhaltenen Variablen u,v,w ausgerechnet.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
L:solve([I,II,III],[u,v,w]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
l:ev(p(x),[L[1][1],L[1][2],L[1][3]]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Nun erhalten wir die genaue Funktion der gesuchten Parabel.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
p1(x):=l;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Die Zeichnung zeigt f(x) und p1(x), sowie beide Grenzen und den Mittelpunkt.
Anscheinend sieht es so aus, als ob die Flächen unterhalb der Parbabel und der Funktion
sehr unterschiedlich sind.
Die beiden Flächen, welche sich zwischen den beiden Funktionen bildet, sind ähnlich groß.
Da eine positiv und die andere negativ sind, heben sie sich quasi auf und so werden
die ähnlich großen Flächen sichtbar.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
wxplot2d(
    [f(x),p1(x),[discrete,[[a,f(a)]]],[discrete, [[a,0],[a,f(a)]]],[discrete,[[b,f(b)]]],[discrete, [[b,0],[b,f(b)]]],[discrete,[[(a+b)/2,f((a+b)/2)]]]], 
    [x,-1.3,0.2], [y,-0.1,1],
    [style,lines,lines,[points,3,3,2],[lines,1,3],[points,3,2,2],[lines,1,2],points],
    [legend, "f(x)","p(x)","a","a","b","b","(a+b)/2"]);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: fold    end   ] */

/* [wxMaxima: subsect start ]
Anwendung der Regel
   [wxMaxima: subsect end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
kepler(a,b):=block(
    return((b-a)/6*(f(a)+4*f((a+b)/2)+f(b)))
);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Funktion wird definiert 
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
f(x):= -log(x);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
 und gezeichnet
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
wxplot2d([f(x)], [x,0,5], [y,-2,5])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Die Grenzen werden definiert
1 -> 4
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
a: 1;
b: 4;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Als Vergleich integriere ich zuerst mit der integrate() Funktion
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
integrate(f(x),x,a,b),numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Nun wende ich die Kepler'sche Regel an.
Wie man hier gut erkennen kann, handelt es sich hierbei nur um eine Näherungsformel.
Dieses Problem kann mit der folgenden Simpson'schen Regel behandelt werden.
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
kepler(a,b),numer;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: fold    end   ] */

/* [wxMaxima: subsect start ]
ding
   [wxMaxima: subsect end   ] */

/* [wxMaxima: fold    start ] */

/* [wxMaxima: input   start ] */
kill(all);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Ist eine numerische Integrationsregel mit der man jede Funktion von x, die stetig ist, integrieren kann.
f(x)    integrand
a       untergrenze
b       obergrenze
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Die Kepler'sche Fassregel ist ein Verfahren zur numerischen Berechnung 
eines Integrals 
indem man eine Parabel über die eigentliche Funktion legt 
und den Flächeninhalt unter der Parabel berechnet.
Das ganze wird folgendermaßen durchgeführt.
Man nimmt 2 Punkte auf der Funktion an und errechnet sich deren Mittepunkt.
Nun hat man 3 Punkte.
Durch diese 3 Punkte legt man eine Parabel.
Unter der Parabel wird über das Integral die Fläche ausgerechnet.
So erhält man wie gesagt einen ungenauen Näherrungswert des Integrals
   [wxMaxima: comment end   ] */

/* [wxMaxima: comment start ]
Kepler Block
a       untergrenze
b       obergrenze
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
kepler(a,b):=block(
    return ((b-a)/6 * (f(a)+4*f((a+b)/2)+f(b)))
)$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
definieren der Funktion
testen des blocks von kepler
untergrenze=0
obergrenze=8
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
f(x):=sin(0.1*x);
kepler(0,8);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: comment start ]
Grafik
a:[[10,0],[10,F(10)]]$
wxplot2d([F(x),[discrete,a],[discrete,b]],
    [x,-1,50],[y,-1,25000],
    [legend,"Stammstunktion","1. Grenze","2. Grenze"])$
   [wxMaxima: comment end   ] */

/* [wxMaxima: input   start ] */
a:[[0,0],[0,f(0)]];
b:[[8,0],[8,f(8)]];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
wxplot2d([f(x),[discrete,a],[discrete,b],[discrete,[[0,0]]],[discrete,[[8,f(8)]]],[discrete,[[4,f(4)]]]],
    [x,-1,10],[y,-1,10],
    [legend,"Stammstunktion","Untergrenze","Obergrenze","Punkt 1","Punkt 2","Mittelpunkt"],
    [style,[lines,1,2],[lines,1,3],[lines,1,4],[points,3,1,2],[points,3,2,2],[points,3,3,2]])$
/* [wxMaxima: input   end   ] */

/* [wxMaxima: fold    end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
